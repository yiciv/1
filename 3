-- Default launch settings
local settings = {
    silentaim = false,
    nofalldamage = false,

    setwalkspeed = false,
    walkspeed = 55,

    setjumppower = false,
    jumppower = 45,


    headshotchanceenabled = false,
    headshotchance = 25,

    --

    gunVisuals = false,
    deadVisuals = false,
    colorEffect = false,

    --

    fov = 80,
    fovcircle = false,
    fovsides = 12,
    fovthickness = 1
}

local main = {running = true}
local end_funcs = {}
local __SETTINGS__ = {}
function main:End()
    main.running = false
    for _,func in pairs(end_funcs) do
        func()
    end
    if (main == shared.__main) then
        shared.__main = nil -- k
    end

    main = nil
    spawn(function()
        for i,v in pairs(connections) do
            pcall(function() v:Disconnect() end)
        end
    end)
    shared.main = nil -- k
    __SETTINGS__:Save()
end
if shared.__main then
    pcall(shared.__main.End, shared.__main)
    shared.__main = nil
end
shared.__main = main

local connections = {}
local function bindEvent(event, callback) -- Let me disconnect in peace
    local con = event:Connect(callback)
    table.insert(connections, con)
    return con
end
table.insert(end_funcs, function()
    for i,v in pairs(connections) do
        v:Disconnect()
        connections[i] = nil
    end
end)

local servs
servs = setmetatable(
{
    Get = function(self, serv)
        if servs[serv] then return servs[serv] end
        local s = game:GetService(serv)
        if s then servs[serv] = s end
        return s
    end;
}, {
    __index = function(self, index)
        local s = game:GetService(index)
        if s then servs[index] = s end
        return s
    end;

        local oesp = drawn[player]
        if oesp == nil then
            oesp = drawTemplate(player)
            drawn[player] = oesp
        end
        
        if oesp then
            oesp.Visible = isvis
            if isvis then
                oesp.Position = v2new(where.X, where.Y)

                local color
                if isteam == false and esp.showvisible then
                    if utility.isvisible(character, root, 0) then
                        color = esp.visiblecolor
                    else
                        color = isteam and esp.teamcolor or esp.enemycolor
                    end
                else
                    color = isteam and esp.teamcolor or esp.enemycolor
                end

                oesp.Color = color

                oesp.Center = esp.centertext
                oesp.Size = esp.size
                oesp.Outline = esp.outline
                oesp.Transparency = (1 - esp.transparency)

                local texts = {
                    player.Name,
                }
                
                local b = humanoid and esp.showhealth and ("%s/%s"):format(floor(humanoid.Health + .5), floor(humanoid.MaxHealth + .5))
                if b then
                    insert(texts, b)
                end
                local c = dist and esp.showdistance and ("%s"):format(floor(dist + .5))
                if c then
                    insert(texts, c)
                end

                local text = "[  " .. concat(texts, " | ") .. " ]"
                oesp.Text = text
            end
        end
    end

    function esp:Remove(player)
        local data = drawn[player]
        if data ~= nil then
            data:Remove()
            drawn[player] = nil
        end
    end

    function esp:RemoveAll()
        for i,v in pairs(drawn) do
            pcall(function() v:Remove() end)
            drawn[i] = nil
        end
    end

    function esp:End()
        completeStop = true
        esp:RemoveAll()
    end
end


local boxes = {} do
    --/ Boxes

    local boxes_settings = {}
    boxes_settings.enabled = settings:Get("boxes.enabled", true)
    boxes_settings.transparency = settings:Get("boxes.transparency", .2)
    boxes_settings.thickness = settings:Get("boxes.thickness", 1.5)
    boxes_settings.showteam = settings:Get("boxes.showteam", false)

    boxes_settings.teamcolor = Color3.fromRGB(155, 114, 170) -- 121,255,97,  57,255,20
    boxes_settings.enemycolor = Color3.fromRGB(220,20,60) -- 238,38,37, 255,0,13, 255,7,58
    boxes_settings.visiblecolor = Color3.fromRGB(234, 234, 234)

    boxes_settings.thirddimension = settings:Get("boxes.thirddimension", true)

    boxes_settings.showvisible = settings:Get("boxes.showvisible", true)

    boxes_settings.dist3d = settings:Get("boxes.dist3d", 1000)
    boxes_settings.drawdistance = settings:Get("boxes.drawdistance", 4000)
    boxes_settings.color = Color3.fromRGB(255, 50, 50)

    setmetatable(boxes, {
        __index = function(self, index)
            if boxes_settings[index] ~= nil then
                local Value = boxes_settings[index]
                if typeof(Value) == "table" then
                    return typeof(Value) == "table" and Value.Value
                else
                    return Value
                end
            end
            warn(("BoxesSettings : Tried to index %s"):format(tostring(index)))
        end;
        __newindex = function(self, index, value)
            if typeof(value) ~= "function" then
                if boxes_settings[index] then
                    local v = boxes_settings[index]
                    if typeof(v) ~= "table" then
                        boxes_settings[index] = value
                        return
                    elseif v.Set then
                        v:Set(value)
                        return
                    end
                end
            end
            rawset(self, index, value)
        end;
    })

    local currentcamera = workspace.CurrentCamera
    local unpack = unpack
    local worldToViewportPoint = currentcamera.WorldToViewportPoint
    local v2new = Vector2.new
    local cfnew = CFrame.new

    local completeStop = false
    local drawn = {}
    local function drawTemplate(player, amount)
        if completeStop then return end

        if drawn[player] then
            if #drawn[player] == amount then
                return drawn[player]
            end
            boxes:Remove(player)
        end

        local props = {
            Visible = true;
            Transparency = 1 - boxes.transparency;
            Thickness = boxes.thickness;
            Color = boxes.color;
        }

        local a = {}
        for i = 1,amount or 4 do
            a[i] = newdrawing("Line", props)
        end

        drawn[player] = {unpack(a)}
        return unpack(a)
    end

    local function updateLine(line, from, to, vis, color)
        if line == nil then return end

        line.Visible = vis
        if vis then
            line.From = from
            line.To = to
            line.Color = color
        end
    end

    function boxes:Draw(player, character, root, humanoid, onscreen, isteam, dist) -- No skid plox
        if completeStop then return end
        if character == nil then return boxes:Remove(player) end
        if root == nil then return boxes:Remove(player) end
        if not onscreen then return boxes:Remove(player) end
        if not boxes.showteam and isteam then
            return boxes:Remove(player) 
        end

        local _3dimension = boxes.thirddimension
        if dist ~= nil then
            if dist > boxes.drawdistance then
                return boxes:Remove(player)
            elseif _3dimension and dist > boxes.dist3d then
                _3dimension = false
            end
        end

        local color
        if isteam == false and boxes.showvisible then
            if utility.isvisible(character, root, 0) then
                color = boxes.visiblecolor
            else
                color = isteam and boxes.teamcolor or boxes.enemycolor
            end
        else
            color = isteam and boxes.teamcolor or boxes.enemycolor
        end

        --size = ... lastsize--, v3new(5,8,0) --getBoundingBox(character)--]] root.CFrame, getExtentsSize(character)--]] -- Might change this later idk + idc
        if _3dimension then

            local tlb, trb, blb, brb, tlf, trf, blf, brf, tlf0, trf0, blf0, brf0
            if drawn[player] == nil or #drawn[player] ~= 12 then
                tlb, trb, blb, brb, tlf, trf ,blf, brf, tlf0, trf0, blf0, brf0 = drawTemplate(player, 12)
            else
                tlb, trb, blb, brb, tlf, trf ,blf, brf, tlf0, trf0, blf0, brf0 = unpack(drawn[player])
            end

            local pos, size = root.CFrame, root.Size--lastsize--, v3new(5,8,0)

            local topleftback, topleftbackvisible = worldToViewportPoint(currentcamera, (pos * cfnew(-size.X, size.Y, size.Z)).p);
            local toprightback, toprightbackvisible = worldToViewportPoint(currentcamera, (pos * cfnew(size.X, size.Y, size.Z)).p);
            local btmleftback, btmleftbackvisible = worldToViewportPoint(currentcamera, (pos * cfnew(-size.X, -size.Y, size.Z)).p);
            local btmrightback, btmrightbackvisible = worldToViewportPoint(currentcamera, (pos * cfnew(size.X, -size.Y, size.Z)).p);

            local topleftfront, topleftfrontvisible = worldToViewportPoint(currentcamera, (pos * cfnew(-size.X, size.Y, -size.Z)).p);
            local toprightfront, toprightfrontvisible = worldToViewportPoint(currentcamera, (pos * cfnew(size.X, size.Y, -size.Z)).p);
            local btmleftfront, btmleftfrontvisible = worldToViewportPoint(currentcamera, (pos * cfnew(-size.X, -size.Y, -size.Z)).p);
            local btmrightfront, btmrightfrontvisible = worldToViewportPoint(currentcamera, (pos * cfnew(size.X, -size.Y, -size.Z)).p);

            local topleftback = v2new(topleftback.X, topleftback.Y)
            local toprightback = v2new(toprightback.X, toprightback.Y)
            local btmleftback = v2new(btmleftback.X, btmleftback.Y)
            local btmrightback = v2new(btmrightback.X, btmrightback.Y)

            local topleftfront = v2new(topleftfront.X, topleftfront.Y)
            local toprightfront = v2new(toprightfront.X, toprightfront.Y)
            local btmleftfront = v2new(btmleftfront.X, btmleftfront.Y)
            local btmrightfront = v2new(btmrightfront.X, btmrightfront.Y)

            -- pls don't copy this bad code
			updateLine(tlb, topleftback, toprightback, topleftbackvisible, color)
            updateLine(trb, toprightback, btmrightback, toprightbackvisible, color)
            updateLine(blb, btmleftback, topleftback, btmleftbackvisible, color)
            updateLine(brb, btmleftback, btmrightback, btmrightbackvisible, color)

            --

            updateLine(brf, btmrightfront, btmleftfront, btmrightfrontvisible, color)
            updateLine(tlf, topleftfront, toprightfront, topleftfrontvisible, color)
            updateLine(trf, toprightfront, btmrightfront, toprightfrontvisible, color)
            updateLine(blf, btmleftfront, topleftfront, btmleftfrontvisible, color)

            --

            updateLine(brf0, btmrightfront, btmrightback, btmrightfrontvisible, color)
            updateLine(tlf0, topleftfront, topleftback, topleftfrontvisible, color)
            updateLine(trf0, toprightfront, toprightback, toprightfrontvisible, color)
            updateLine(blf0, btmleftfront, btmleftback, btmleftfrontvisible, color)
            return
        else

            local tl, tr, bl, br
            if drawn[player] == nil or #drawn[player] ~= 4 then
                tl, tr, bl, br = drawTemplate(player, 4)
            else
                tl, tr, bl, br = unpack(drawn[player])
            end

            local pos, size = root.CFrame, root.Size

            local topleft, topleftvisible = worldToViewportPoint(currentcamera, (pos * cfnew(-size.X, size.Y, 0)).p);
            local topright, toprightvisible = worldToViewportPoint(currentcamera, (pos * cfnew(size.X, size.Y, 0)).p);
            local btmleft, btmleftvisible = worldToViewportPoint(currentcamera, (pos * cfnew(-size.X, -size.Y, 0)).p);
            local btmright, btmrightvisible = worldToViewportPoint(currentcamera, (pos * cfnew(size.X, -size.Y, 0)).p);

            local topleft = v2new(topleft.X, topleft.Y)
            local topright = v2new(topright.X, topright.Y)
            local btmleft = v2new(btmleft.X, btmleft.Y)
            local btmright = v2new(btmright.X, btmright.Y)

            updateLine(tl, topleft, topright, topleftvisible, color)
            updateLine(tr, topright, btmright, toprightvisible, color)
            updateLine(bl, btmleft, topleft, btmleftvisible, color)
            updateLine(br, btmleft, btmright, btmrightvisible, color)
            return
        end


        -- I have never been more bored when doing 3d boxes.
    end

    function boxes:Remove(player)
        local data = drawn[player]
        if data == nil then return end

        if data then
            for i,v in pairs(data) do
                v:Remove()
                data[i] = nil
            end
        end
        drawn[player] = nil
    end

    function boxes:RemoveAll()
        for i,v in pairs(drawn) do
            pcall(function()
                for i2,v2 in pairs(v) do
                    v2:Remove()
                    v[i] = nil
                end
            end)
            drawn[i] = nil
        end
        drawn = {}
    end

    function boxes:End()
        completeStop = true
        for i,v in pairs(drawn) do
            for i2,v2 in pairs(v) do
                pcall(function()
                    v2:Remove()
                    v[i2] = nil
                end)
            end
            drawn[i] = nil
        end
        drawn = {}
    end
end


local visuals = {} do
    --/ Visuals

    visuals.enabled = settings:Get("visuals.enabled", true).Value

    local players = game:GetService("Players")
    local locpl = players.LocalPlayer
    local mouse = locpl:GetMouse()
    local isDescendantOf = game.IsDescendantOf
    local getPlayers = players.GetPlayers
    local findFirstChildOfClass = game.FindFirstChildOfClass

    local cfnew = CFrame.new

    local completeStop = false
    bindEvent(players.PlayerRemoving, function(p)
        if completeStop then return end
        boxes:Remove(p)
        esp:Remove(p)
    end)


    local currentcamera = workspace.CurrentCamera
    local worldToViewportPoint = currentcamera.WorldToViewportPoint

    local function remove(p)
        esp:Remove(p)
        boxes:Remove(p)
    end

    local circle = newdrawing("Circle", {
        Position = Vector2.new(mouse.X, mouse.Y+36),
        Radius = sett_2.fov,
        Color = Color3.fromRGB(240,240,240),
        Thickness = sett_2.fovthickness,
        Filled = false,
        Transparency = 0,
        NumSides = sett_2.fovsides,
        Visible = sett_2.fovcircle;
    })
    
    function visuals.step()
        --if visuals.enabled ~= true then return clearDrawn() end
        if completeStop then return end
        
        if (visuals.enabled and (sett_2.fovcircle)) then                 
            circle.Position = Vector2.new(mouse.X, mouse.Y+36)
            circle.Radius = sett_2.fov
            circle.NumSides = sett_2.fovsides
            circle.Thickness = sett_2.fovthickness
            circle.Transparency = .8
        else
            circle.Transparency = 0
        end

        if visuals.enabled and (esp.enabled or boxes.enabled) then

            if esp.enabled then
                esp.offset = cfnew(0, esp.yoffset, 0)
            end

            for i,v in pairs(getPlayers(players)) do
                if (v ~= locpl) then
                    local character = utility.getcharacter(v)
                    if character and isDescendantOf(character, game) == true then
                        local root = utility.getroot(character)
                        local humanoid = findFirstChildOfClass(character, "Humanoid")
                        if root and isDescendantOf(character, game) == true then
                            local screenpos, onscreen = worldToViewportPoint(currentcamera, root.Position)
                            local dist = utility.myroot and (utility.myroot.Position - root.Position).Magnitude
                            local isteam = (v.Team~=nil and v.Team==locpl.Team) and not v.Neutral or false
                            if not boxes.showteam and not esp.showteam and isteam then
                                remove(v)
                                continue
                            end

                            if boxes.enabled then -- Profilebegin is life
                                boxes:Draw(v, character, root, humanoid, onscreen, isteam, dist)
                            else
                                boxes:Remove(v)
                            end
        
                            if esp.enabled then
                                esp:Draw(v, character, root, humanoid, onscreen, isteam, dist)
                            else
                                esp:Remove(v)
                            end
                        else
                            remove(v)
                        end
                    else
                        remove(v)
                    end
                end
            end
        else
            -- mhm
            boxes:RemoveAll()
            esp:RemoveAll()
        end
    end

    function visuals:End()
        completeStop = true
        boxes:End()
        esp:End()

        clearDrawn()
    end
    table.insert(end_funcs, visuals.End)
end



-- Ok yes
local run = {} do
    --/ Run

    local tostring = tostring;
    local warn = warn;
    local debug = debug;

    local runservice = game:GetService("RunService")
    local renderstep = runservice.RenderStepped
    local heartbeat = runservice.Heartbeat
    local stepped = runservice.Stepped
    local wait = renderstep.wait

    local function Warn(a, ...) -- ok frosty get to bed
        warn(tostring(a):format(...))
    end
    
    run.dt = 0
    run.time = tick()

    local engine = {
        {
            name = 'visuals.step',
            func = visuals.step
        };
    }
    local heartengine = {
    }
    local whilerender = {
    }

    run.onstep = {}
    run.onthink = {}
    run.onrender = {}
    function run.wait()
        wait(renderstep)
    end

    local rstname = "Renderstep"
    bindEvent(renderstep, function(delta)
        local ntime = tick()
        run.dt = ntime - run.time
        run.time = ntime

        for i,v in pairs(engine) do
            xpcall(v.func, function(err)
                Warn("Failed to run %s! %s | %s", v.name, tostring(err), debug.traceback())
                engine[i] = nil
            end, run.dt)
        end
    end)

    bindEvent(heartbeat, function(delta)
        for i,v in pairs(heartengine) do
            xpcall(v.func, function(err)
                Warn("Failed to run %s! %s | %s", v.name, tostring(err), debug.traceback())
                heartengine[i] = nil
            end, delta)
        end
    end)

    bindEvent(stepped, function(delta)
        for i,v in pairs(whilerender) do
            xpcall(v.func, function(err)
                Warn("Failed to run %s! %s | %s", v.name, tostring(err), debug.traceback())
                heartengine[i] = nil
            end, delta)
        end
    end)
end


local uid = tick() .. math.random(1,100000) .. math.random(1,100000)
if shared.main and shared.main.close and shared.main.uid~=uid then shared.main:close() end

local hud = loadstring(game:HttpGet("https://pastebin.com/raw/3hREvLEU", true))()[1]
table.insert(end_funcs, hud.End)

do
    --/ Main or something I am not sure what I am writing anymore
    settings:Save()

    main.enabled = true
    main.visible = hud.Visible
    function main:show()
        hud:show()
        main.visible = hud.Visible
    end

    function main:hide()
        hud:hide()
        main.visible = hud.Visible
    end

    setmetatable(main, { -- ok safazi be happy now
        __newindex = function(self, index, value)
            if (index == "Keybind") then
                settings:Set("hud.keybind", value)
                hud.Keybind = value
                return
            end
        end;
    })

    shared.main = main

    local players = game:GetService("Players")
    local loc = players.LocalPlayer
    bindEvent(players.PlayerRemoving, function(p)
        if p == loc then
            settings:Save()
        end
    end)

end

local shais = sett_2


-- I didn't think this ui lib through
local Aiming = hud:AddTab({
	Text = "silent aim (MADE BY WAVEY)",
})

Aiming:AddToggle({
    Text = "enable silent aim",
    State = shais.silentaim,
}, function(new)
    shais.silentaim = new
end)

Aiming:AddSlider({
    Text = "headshot chance",
    Current = shais.headshotchance,
}, {0, 100, 1}, function(new)
    shais.headshotchance = new
end)

local FieldOfView = Aiming:AddToggleCategory({
    Text = "fov",
    State = shais.fovcircle,
}, function(state) 
    shais.fovcircle = state
end)

FieldOfView:AddSlider({
    Text = "Radius",
    Current = shais.fov,
}, {1, 1000, 1}, function(new)
    shais.fov = new
end)

FieldOfView:AddSlider({
    Text = "Sides",
    Current = shais.fovsides,
}, {6, 40, 1}, function(new)
    shais.fovsides = new
end)


FieldOfView:AddSlider({
    Text = "Thickness",
    Current = shais.fovthickness,
}, {0.1, 50, 0.1}, function(new)
    shais.fovthickness = new
end)



local Character = hud:AddTab({
	Text = "character",
})


Character:AddToggle({
    Text = "no fall damage",
    State = shais.nofalldamage,
}, function(new)
    shais.nofalldamage = new
end)


Character:AddToggle({
    Text = "enable speed",
    State = shais.setwalkspeed,
}, function(new)
    shais.setwalkspeed = new
    if (not new) then
        storage.char.setbasewalkspeed(char, storage.char.oldWalkspeed)
    else
        storage.char.setbasewalkspeed(char, shais.walkspeed)
    end
end)

Character:AddSlider({
    Text = "speed",
    Current = shais.walkspeed,
}, {1, 100, 1}, function(new)
    shais.walkspeed = new
    storage.char.setbasewalkspeed(char, new)
end)

Character:AddToggle({
    Text = "enable jump",
    State = shais.setjumppower,
}, function(new)
    shais.setjumppower = new
end)

Character:AddSlider({
    Text = "jumppower",
    Current = shais.jumppower,
}, {1, 50, 1}, function(new)
    shais.jumppower = new
end)

local Visuals = hud:AddTab({
    Text = "Visuals",
})

Visuals:AddLabel({Text = "Gun visuals will update when you respawn"})

Visuals:AddToggle({
    Text = "Color effect",
    State = shais.colorEffect,
}, function(new)
    shais.colorEffect = new
    storage.colorEffect.Enabled = new
end)


Visuals:AddToggle({
    Text = "Gun visuals",
    State = shais.gunVisuals,
}, function(new)
    shais.gunVisuals = new
end)

Visuals:AddToggle({
    Text = "Dead visuals",
    State = shais.deadVisuals,
}, function(new)
    shais.deadVisuals = new
end)






local Hud = hud:AddTab({
    Text = "Hud",
})

hud.Keybind = settings:Get("hud.keybind", "RightAlt").Value
Hud:AddKeybind({
    Text = "Toggle",
    Current = hud.Keybind,
}, function(new)
    settings:Set("hud.keybind", new.Name)
    hud.Keybind = new.Name
end)

Hud:AddButton({
    Text = "Exit"
}, function()
    main:End()
end)
